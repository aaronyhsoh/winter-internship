"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * DefaultApi - axios parameter creator
 * @export
 */
const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {CreateBondDto} [createBondDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndIssueBond: async (createBondDto, options = {}) => {
            const localVarPath = `/bond/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createBondDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {CreateHtlcDto} [createHtlcDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBondHtlc: async (createHtlcDto, options = {}) => {
            const localVarPath = `/htlc/bond/initiate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createHtlcDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHtlc: async (options = {}) => {
            const localVarPath = `/htlc/getAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBondById: async (id, options = {}) => {
            // verify required parameter '' is not null or undefined
            const localVarPath = `/bond`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHoldingBonds: async (options = {}) => {
            const localVarPath = `/bond/holder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHtlcById: async (id, options = {}) => {
            // verify required parameter '' is not null or undefined
            const localVarPath = `/htlc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {RefundHtlcDto} [refundHtlcDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundBondHtlc: async (refundHtlcDto, options = {}) => {
            const localVarPath = `/htlc/bond/refund`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(refundHtlcDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {BondTransferDto} [bondTransferDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferBond: async (bondTransferDto, options = {}) => {
            const localVarPath = `/bond/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(bondTransferDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {WithdrawHtlcDto} [withdrawHtlcDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawBondHtlc: async (withdrawHtlcDto, options = {}) => {
            const localVarPath = `/htlc/bond/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(withdrawHtlcDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DefaultApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {CreateBondDto} [createBondDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAndIssueBond(createBondDto, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAndIssueBond(createBondDto, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {CreateHtlcDto} [createHtlcDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBondHtlc(createHtlcDto, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBondHtlc(createHtlcDto, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllHtlc(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllHtlc(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {string}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBondById(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBondById(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHoldingBonds(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHoldingBonds(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {string}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHtlcById(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHtlcById(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {RefundHtlcDto} [refundHtlcDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundBondHtlc(refundHtlcDto, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundBondHtlc(refundHtlcDto, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {BondTransferDto} [bondTransferDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferBond(bondTransferDto, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferBond(bondTransferDto, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {WithdrawHtlcDto} [withdrawHtlcDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async withdrawBondHtlc(withdrawHtlcDto, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.withdrawBondHtlc(withdrawHtlcDto, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
const DefaultApiFactory = function (configuration, basePath, axios) {
    console.log("here1");
    const localVarFp = (0, exports.DefaultApiFp)(configuration);
    return {
        /**
         *
         * @param {CreateBondDto} [createBondDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndIssueBond(createBondDto, options) {
            return localVarFp.createAndIssueBond(createBondDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CreateHtlcDto} [createHtlcDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBondHtlc(createHtlcDto, options) {
            return localVarFp.createBondHtlc(createHtlcDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHtlc(options) {
            return localVarFp.getAllHtlc(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBondById(id, options) {
            return localVarFp.getBondById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHoldingBonds(options) {
            return localVarFp.getHoldingBonds(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHtlcById(id, options) {
            return localVarFp.getHtlcById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {RefundHtlcDto} [refundHtlcDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundBondHtlc(refundHtlcDto, options) {
            return localVarFp.refundBondHtlc(refundHtlcDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {BondTransferDto} [bondTransferDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferBond(bondTransferDto, options) {
            return localVarFp.transferBond(bondTransferDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {WithdrawHtlcDto} [withdrawHtlcDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawBondHtlc(withdrawHtlcDto, options) {
            return localVarFp.withdrawBondHtlc(withdrawHtlcDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends base_1.BaseAPI {
    /**
     *
     * @param {CreateBondDto} [createBondDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createAndIssueBond(createBondDto, options) {
        return (0, exports.DefaultApiFp)(this.configuration).createAndIssueBond(createBondDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CreateHtlcDto} [createHtlcDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createBondHtlc(createHtlcDto, options) {
        return (0, exports.DefaultApiFp)(this.configuration).createBondHtlc(createHtlcDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getAllHtlc(options) {
        return (0, exports.DefaultApiFp)(this.configuration).getAllHtlc(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBondById(id, options) {
        return (0, exports.DefaultApiFp)(this.configuration).getBondById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getHoldingBonds(options) {
        return (0, exports.DefaultApiFp)(this.configuration).getHoldingBonds(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getHtlcById(id, options) {
        return (0, exports.DefaultApiFp)(this.configuration).getHtlcById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {RefundHtlcDto} [refundHtlcDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    refundBondHtlc(refundHtlcDto, options) {
        return (0, exports.DefaultApiFp)(this.configuration).refundBondHtlc(refundHtlcDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {BondTransferDto} [bondTransferDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transferBond(bondTransferDto, options) {
        return (0, exports.DefaultApiFp)(this.configuration).transferBond(bondTransferDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {WithdrawHtlcDto} [withdrawHtlcDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    withdrawBondHtlc(withdrawHtlcDto, options) {
        return (0, exports.DefaultApiFp)(this.configuration).withdrawBondHtlc(withdrawHtlcDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DefaultApi = DefaultApi;
//# sourceMappingURL=data:application/json;base64,