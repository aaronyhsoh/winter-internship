/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BondTransferDto
 */
export interface BondTransferDto {
    /**
     * 
     * @type {string}
     * @memberof BondTransferDto
     */
    'receiver'?: string;
    /**
     * 
     * @type {string}
     * @memberof BondTransferDto
     */
    'bondId'?: string;
}
/**
 * 
 * @export
 * @interface CreateBondDto
 */
export interface CreateBondDto {
    /**
     * 
     * @type {string}
     * @memberof CreateBondDto
     */
    'holder'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBondDto
     */
    'bondName'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateBondDto
     */
    'faceValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateBondDto
     */
    'couponRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateBondDto
     */
    'yearsToMature'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateBondDto
     */
    'paymentInterval'?: number;
}
/**
 * 
 * @export
 * @interface CreateHtlcDto
 */
export interface CreateHtlcDto {
    /**
     * 
     * @type {string}
     * @memberof CreateHtlcDto
     */
    'htlcId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateHtlcDto
     */
    'bondId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateHtlcDto
     */
    'receiver'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateHtlcDto
     */
    'escrow'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateHtlcDto
     */
    'timeout'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateHtlcDto
     */
    'currency'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateHtlcDto
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateHtlcDto
     */
    'hash'?: string;
}
/**
 * 
 * @export
 * @interface RefundHtlcDto
 */
export interface RefundHtlcDto {
    /**
     * 
     * @type {string}
     * @memberof RefundHtlcDto
     */
    'escrow'?: string;
    /**
     * 
     * @type {string}
     * @memberof RefundHtlcDto
     */
    'htlcId'?: string;
}
/**
 * 
 * @export
 * @interface WithdrawHtlcDto
 */
export interface WithdrawHtlcDto {
    /**
     * 
     * @type {string}
     * @memberof WithdrawHtlcDto
     */
    'escrow'?: string;
    /**
     * 
     * @type {string}
     * @memberof WithdrawHtlcDto
     */
    'htlcId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WithdrawHtlcDto
     */
    'secret'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateBondDto} [createBondDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndIssueBond: async (createBondDto?: CreateBondDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bond/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(createBondDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateHtlcDto} [createHtlcDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBondHtlc: async (createHtlcDto?: CreateHtlcDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/htlc/bond/initiate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(createHtlcDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHtlc: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/htlc/getAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string}  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBondById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter '' is not null or undefined
            const localVarPath = `/bond`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHoldingBonds: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bond/holder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string}  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHtlcById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter '' is not null or undefined
            const localVarPath = `/htlc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefundHtlcDto} [refundHtlcDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundBondHtlc: async (refundHtlcDto?: RefundHtlcDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/htlc/bond/refund`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(refundHtlcDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BondTransferDto} [bondTransferDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferBond: async (bondTransferDto?: BondTransferDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bond/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(bondTransferDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WithdrawHtlcDto} [withdrawHtlcDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawBondHtlc: async (withdrawHtlcDto?: WithdrawHtlcDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/htlc/bond/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(withdrawHtlcDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateBondDto} [createBondDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAndIssueBond(createBondDto?: CreateBondDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAndIssueBond(createBondDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateHtlcDto} [createHtlcDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBondHtlc(createHtlcDto?: CreateHtlcDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBondHtlc(createHtlcDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllHtlc(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllHtlc(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string}  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBondById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBondById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHoldingBonds(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHoldingBonds(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string}  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHtlcById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHtlcById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RefundHtlcDto} [refundHtlcDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundBondHtlc(refundHtlcDto?: RefundHtlcDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundBondHtlc(refundHtlcDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BondTransferDto} [bondTransferDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferBond(bondTransferDto?: BondTransferDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferBond(bondTransferDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WithdrawHtlcDto} [withdrawHtlcDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async withdrawBondHtlc(withdrawHtlcDto?: WithdrawHtlcDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.withdrawBondHtlc(withdrawHtlcDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    console.log("here1")
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateBondDto} [createBondDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndIssueBond(createBondDto?: CreateBondDto, options?: any): AxiosPromise<object> {
            return localVarFp.createAndIssueBond(createBondDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateHtlcDto} [createHtlcDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBondHtlc(createHtlcDto?: CreateHtlcDto, options?: any): AxiosPromise<object> {
            return localVarFp.createBondHtlc(createHtlcDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHtlc(options?: any): AxiosPromise<object> {
            return localVarFp.getAllHtlc(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string}  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBondById(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getBondById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHoldingBonds(options?: any): AxiosPromise<object> {
            return localVarFp.getHoldingBonds(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string}  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHtlcById(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getHtlcById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefundHtlcDto} [refundHtlcDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundBondHtlc(refundHtlcDto?: RefundHtlcDto, options?: any): AxiosPromise<object> {
            return localVarFp.refundBondHtlc(refundHtlcDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BondTransferDto} [bondTransferDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferBond(bondTransferDto?: BondTransferDto, options?: any): AxiosPromise<object> {
            return localVarFp.transferBond(bondTransferDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WithdrawHtlcDto} [withdrawHtlcDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawBondHtlc(withdrawHtlcDto?: WithdrawHtlcDto, options?: any): AxiosPromise<object> {
            return localVarFp.withdrawBondHtlc(withdrawHtlcDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {CreateBondDto} [createBondDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAndIssueBond(createBondDto?: CreateBondDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createAndIssueBond(createBondDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateHtlcDto} [createHtlcDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBondHtlc(createHtlcDto?: CreateHtlcDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBondHtlc(createHtlcDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllHtlc(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllHtlc(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string}  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBondById(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBondById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getHoldingBonds(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getHoldingBonds(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string}  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getHtlcById(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getHtlcById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RefundHtlcDto} [refundHtlcDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refundBondHtlc(refundHtlcDto?: RefundHtlcDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).refundBondHtlc(refundHtlcDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BondTransferDto} [bondTransferDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public transferBond(bondTransferDto?: BondTransferDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).transferBond(bondTransferDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WithdrawHtlcDto} [withdrawHtlcDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public withdrawBondHtlc(withdrawHtlcDto?: WithdrawHtlcDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).withdrawBondHtlc(withdrawHtlcDto, options).then((request) => request(this.axios, this.basePath));
    }
}


